#Evcno Related
spring.application.name=EVCNO-write
spring.profiles.active=dev
server.port=8080

# Application Config
info.app.name=@project.artifactId@
info.app.version=@project.version@

# Database Config
spring.datasource.url=${EVCNO_WRITE_SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/EVCNO_write_db}
spring.datasource.username=${EVCNO_WRITE_SPRING_DATASOURCE_USERNAME:adminWrite}
spring.datasource.password=${EVCNO_WRITE_SPRING_DATASOURCE_PASSWORD:adminWrite}

# Spring and Axon Cache Config
cache.type=${CACHE_TYPE:IN_MEMORY}

# JPA, Liquibase and Hibernate Config
spring.liquibase.change-log=${LIQUIBASE_MASTER_CHANGELOG:classpath:db/changelog/db.changelog.xml}
spring.jpa.hibernate.ddl-auto=${JPA_HIBERNATE_AUTO_DDL:none}

# Hibernate Debugging Config for Dev Only
logging.level.org.hibernate.SQL=${LOGGING_LEVEL_ORG_HIBERNATE_SQL:ERROR}
spring.jpa.show-sql=${SPRING_JPA_SHOW_SQL:false}
spring.jpa.properties.hibernate.format_sql=${SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL:true}
spring.jpa.open-in-view=false

# Hibernate Statistics Config for Dev Only
hibernate.generate_statistics=${HIBERNATE_GENERATE_STATISTICS:true}
org.hibernate.stat=${ORG_HIBERNATE_STAT:DEBUG}

# Axon Config
axon.axonserver.servers=${AXON_SERVER_HOST:localhost}:${AXONSERVER_PORT2_HOST:8124}
axon.aggregate.snapshot.threshold=${AXON_AGGREGATE_SNAPSHOT_THRESHOLD:1}
axon.metrics.micrometer.dimensional=${AXON_METRICS_MICROMETER_DIMENSIONAL:true}

# Axon Framework config to disable heartbeat monitoring as not to get DEADLINE_EXCEEDED errors while debugging
# Please note that this is absolutely not recommended for production
# Please note that the Axon Server also has its own heartbeat which is disabled for debugging purposes
axon.axonserver.heartbeat.enabled=false

# Axon Serializer Config
axon.serializer.general=${AXON_SERIALIZER_GENERAL:xstream}
axon.serializer.events=${AXON_SERIALIZER_EVENTS:xstream}
axon.serializer.messages=${AXON_SERIALIZER_MESSAGES:xstream}

# Application Metrics Config
management.endpoints.web.exposure.include=${MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE:*}
management.endpoint.health.show-details=${MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS:always}
management.endpoint.metrics.enabled=${MANAGEMENT_ENDPOINT_METRICS_ENABLED:true}
management.endpoint.prometheus.enabled=${MANAGEMENT_ENDPOINT_PROMETHEUS_ENABLED:true}
management.prometheus.metrics.export.enabled=${MANAGEMENT_PROMETHEUS_METRICS_EXPORT_ENABLED:true}

#Redis
spring.data.redis.host=localhost
spring.data.redis.port=6379

# Documentation Config
springdoc.show-actuator=${SPRINGDOC_SHOW_ACTUATOR:true}
springdoc.swagger-ui.groups-order=${SPRINGDOC_SWAGGER_UI_GROUPS_ORDER:DESC}
springdoc.swagger-ui.disable-swagger-default-url=${SPRINGDOC_SWAGGER_UI_DISABLE_SWAGGER_DEFAULT_URL:true}

# Logging Config
logging.level.root=${LOGGING_LEVEL_ROOT:INFO}
logging.level.org.springframework.web=${LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB:INFO}
logging.level.com.accelerator.EVCNO=${LOGGING_LEVEL_COM_ACCELERATOR_EVCNO:DEBUG}
logging.level.org.springframework.cloud.stream=${LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_CLOUD_STREAM:INFO}
logging.level.org.springframework.kafka=${LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_KAFKA:INFO}
logging.level.org.axonframework.axonserver.connector.command.AxonServerCommandBus=${LOGGING_LEVEL_ORG_AXONFRAMEWORK_AXONSERVER_CONNECTOR_COMMAND_AXONSERVERCOMMANDBUS:DEBUG}
logging.level.org.axonframework.axonserver.connector.query.AxonServerQueryBus=${LOGGING_LEVEL_ORG_AXONFRAMEWORK_AXONSERVER_CONNECTOR_QUERY_AXONSERVERQUERYBUS:DEBUG}
logging.level.org.axonframework.axonserver.connector.event.axon.AxonServerEventStore=${LOGGING_LEVEL_ORG_AXONFRAMEWORK_AXONSERVER_CONNECTOR_EVENT_AXON_AXONSERVEREVENTSTORE:DEBUG}

# SpringDoc OpenAPI 3 Config
springdoc.api-docs.version=${SPRINGDOC_API_DOCS_VERSION:openapi_3_1}
springdoc.api-docs.path=${SPRINGDOC_API_DOCS_PATH:/api-docs}
springdoc.swagger-ui.path=${SPRINGDOC_SWAGGER_WRITE_UI_PATH:/EVCNO/write/swagger.html}

# Webhook URL
webhook.url=${WEBHOOK_URL:http://localhost:8080/webhook}

# API Response Versions
reservation.request.response.version=${RESERVATION_REQUEST_RESPONSE_VERSION:1.0}
booking.entry.response.version=${BOOKING_ENTRY_RESPONSE_VERSION:1.0}
error.response.version=${ERROR_RESPONSE_VERSION:1.0}
account.request.response.version=${ACCOUNT_REQUEST_RESPONSE_VERSION:1.0}
chart.account.request.response.version=${CHART_ACCOUNT_REQUEST_RESPONSE_VERSION:1.0}
EVCNO.request.response.version=${EVCNO_REQUEST_RESPONSE_VERSION:1.0}

# API Default Request Version
default.request.version=${DEFAULT_REQUEST_VERSION:1.0}

#Kafka config
spring.kafka.producer.bootstrap-servers=${SPRING.KAFKA.PRODUCER.BOOTSTRAP_SERVER:localhost:29092}
spring.kafka.bootstrap-servers=${SPRING.KAFKA.PRODUCER.BOOTSTRAP_SERVER:localhost:29092}
spring.kafka.security.protocol=PLAINTEXT
spring.cloud.stream.bindings.dataSupplier-out-0.destination=data-stream-topic
spring.cloud.stream.bindings.dataSupplier-out-0.producer.useNativeEncoding=true
spring.cloud.stream.kafka.bindings.dataSupplier-out-0.producer.configuration.value.serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
spring.cloud.stream.kafka.bindings.dataSupplier-out-0.producer.configuration.schema.registry.url=${SCHEMA_REGISTRY_URL:http://localhost:8090}

#Kafka Logging
logging.level.org.apache.kafka.clients.producer.ProducerConfig=WARN
logging.level.org.apache.kafka.clients.consumer.ConsumerConfig=WARN
logging.level.org.apache.kafka.clients.admin.AdminClientConfig=WARN
logging.level.io.confluent.kafka.serializers.KafkaAvroSerializerConfig=WARN
logging.level.org.apache.kafka.common.utils.AppInfoParser=WARN
logging.level.org.apache.kafka.common.metrics=WARN
logging.level.org.apache.kafka.clients.Metadata=WARN
logging.level.org.apache.kafka.clients.consumer=ERROR
logging.level.org.springframework.cloud.stream.binder.kafka=ERROR
logging.level.org.springframework.cloud.stream.messaging=ERROR


